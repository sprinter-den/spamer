from datetime import datetime
import os
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import CallbackQuery
from proxy_checking import ProxyChecker
from telethon import TelegramClient

from data.config import ADMINS, api_id, api_hash
from filters import IsNotSubscribed
from keyboards.inline.menu import admin_menu, main_menu, back_to_main_menu, goo
from loader import dp
from utils.db_api.db_commands import *
from utils.other_utils import get_user_date, send_message_to_chat


@dp.callback_query_handler(IsNotSubscribed())
async def answer_call(call: CallbackQuery):
    await call.answer("‚ùóÔ∏è–£ –≤–∞—Å –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")


# ========================DELETE BROADCAST MESSAGE========================
# WITH STATE
@dp.callback_query_handler(text="delete_this_message", state="*")
async def del_broadcast_msg(call: CallbackQuery):
    await call.message.delete()
    await bot_start(call.message)


# ========================SHOW MAIN MENU========================
# /start WITHOUT STATE


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    if not await select_user(message.from_user.id):
        await add_user(message.from_user.id)
    stat, user = await select_statistic(), await select_user(message.from_user.id)
    result_date = await get_user_date(message.from_user.id)
    proxy = await select_user_proxy(message.from_user.id)
    if not await select_user(message.from_user.id):
        await add_user(message.from_user.id)
    stat, user = await select_statistic(), await select_user(message.from_user.id)
    result_date = await get_user_date(message.from_user.id)
    proxy = await select_user_proxy(message.from_user.id)
    await message.answer(
        "<b>üëã –ü—Ä–∏–≤–µ—Ç, –¥–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–≤—Ç–æ~–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞!\n\n"
        "‚ôªÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–±–æ–º—É —é–∑–µ—Ä—É —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!\n"
        "‚ôªÔ∏è –î–æ–±–∞–≤–ª—è—Ç—å —Ö–æ—Ç—å 100 —á–∞—Ç–æ–≤ (–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)\n"
        "‚ôªÔ∏è–í–∫–ª—é—á–∞—Ç—å / –æ—Ç–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "‚ôªÔ∏è–ú–µ–Ω—è—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–¥–µ—Ä–∂–∫–∏ / —Ç–µ–∫—Å—Ç / —Ñ–æ—Ç–æ / –∏ –¥—Ä—É–≥–∏–µ!\n\n"
        "üöÄ–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>",
        reply_markup=goo)
    
@dp.callback_query_handler(text="back_to_main_menu", state="*")
async def support(call: CallbackQuery, state: FSMContext):
    await state.finish()
    sms = open('sms.txt', 'r').read()
    tt = open('time.txt', 'r')
    ti = int(tt.read())
    tt.close()
    file_list = os.listdir('sessions')
    sms = open('sms.txt', 'r').read()
    x = len(file_list)   
    file_list = os.listdir('sessions')
    sms = open('sms.txt', 'r').read()
    x = len(file_list)
    uss = open('ussers.txt', 'r')
    ff = uss.readlines()
    z = len(ff)
    user = await select_user(call.from_user.id)
    stat, proxy = await select_statistic(), await select_user_proxy(call.from_user.id)
    result_date = await get_user_date(call.from_user.id)
    try:
        sms = open('sms.txt', 'r').read()
        path = f'pics/broadcast/cicada.jpg'
        with open(path, 'rb') as f:
            photo = f.read()
        await call.message.answer_photo(photo=photo, caption=f"{sms}")
        await call.message.answer(
            f"üîºüîºüîº <b>–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à –ø–æ—Å—Ç</b> üîºüîºüîº\n\n"
            f"üë§    <b>–ê–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∞–º–∞:</b>   {x}\n"
            f"üïî    <b>–¢–∞–π–º–∏–Ω–≥ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞</b> {ti} <b>—Å–µ–∫.</b>\n\n"
            f"üë©‚Äçüë©‚Äçüëß‚Äçüëß    <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ø–∞–º–∞:</b> {z}", reply_markup=await main_menu(call.message.from_user.id))
    except:
        await call.message.answer(sms)
        await call.message.answer(
            f"üîºüîºüîº <b>–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à –ø–æ—Å—Ç</b> üîºüîºüîº\n\n"
            f"üë§    <b>–ê–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∞–º–∞:</b>   {x}\n"
            f"üïî    <b>–¢–∞–π–º–∏–Ω–≥ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞</b> {ti} <b>—Å–µ–∫.</b>\n\n"
            f"üë©‚Äçüë©‚Äçüëß‚Äçüëß    <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ø–∞–º–∞:</b> {z}", reply_markup=await main_menu(call.message.from_user.id))


# BACK FROM ANY HANDLER TO MAIN MENU WITH STATE
@dp.callback_query_handler(text="admin", state="*")
async def support(call: CallbackQuery, state: FSMContext):
    

    await state.finish()
    if str(call.from_user.id) in ADMINS:
        await call.message.edit_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu)


# ========================INFO BUTTON========================
@dp.callback_query_handler(text="inf")
async def support(call: CallbackQuery):
    await call.message.edit_text(
        "<b>üëã –ü—Ä–∏–≤–µ—Ç, –¥–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–≤—Ç–æ~–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞!\n\n"
        "‚ôªÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–±–æ–º—É —é–∑–µ—Ä—É —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!\n"
        "‚ôªÔ∏è –î–æ–±–∞–≤–ª—è—Ç—å —Ö–æ—Ç—å 100 —á–∞—Ç–æ–≤ (–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)\n"
        "‚ôªÔ∏è–í–∫–ª—é—á–∞—Ç—å / –æ—Ç–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "‚ôªÔ∏è–ú–µ–Ω—è—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–¥–µ—Ä–∂–∫–∏ / —Ç–µ–∫—Å—Ç / —Ñ–æ—Ç–æ / –∏ –¥—Ä—É–≥–∏–µ!\n\n"
        "üöÄ–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>",
        reply_markup=back_to_main_menu)
