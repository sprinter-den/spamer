
from calendar import c
from telethon.sessions import StringSession
from email import message
from email.policy import strict
import random
from datetime import datetime
import asyncio
from shutil import which
from sqlite3 import Row
from statistics import mean
from typing import Any
import socks
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty
import os, sys
import configparser
import csv
import time
from telethon.tl.functions.channels import JoinChannelRequest
from telethon import TelegramClient
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.types import InputChannel
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os, sys
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import configparser
from telethon import functions, types
import csv
import time
from telethon.tl.functions.channels import JoinChannelRequest
import random
#from data.config import api_id, api_hash
#from loader import scheduler
import os
from telethon.tl.functions.channels import GetParticipantsRequest
from datetime import datetime, timedelta

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from proxy_checking import ProxyChecker
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import GetDialogsRequest
from telethon import TelegramClient

from keyboards.inline.menu import back_to_main_menu, api_hash, api_id, code_menu, \
    main_menu, proxy_menu, start_spam_menu, accept_spam_menu, userrs
from loader import dp, scheduler
from states.states import AddAccount, DelAcc, AddProxy, DelProxy, SpamChat, SpamUser, SpamBot
from utils.db_api.db_commands import *
# ===============CHATS===========
# SHOW ALL CHATS
from utils.other_utils import get_user_date, send_message_to_chat, stop_job
from keyboards.inline.menu import admin_menu, akiy

class post(StatesGroup):
    tets_text = State()

class sms2(StatesGroup):
    sms_text = State()

@dp.message_handler(commands=['cicada'])
async def cicada(message: Message):
    await message.answer("–ú–µ–Ω—é –ê–¥–º–∏–Ω–∞", reply_markup=admin_menu)

@dp.callback_query_handler(text="sms", state="*")
async def sms(call: CallbackQuery, state: FSMContext):
    await call.message.answer("<b>–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>",
                                 reply_markup=back_to_main_menu)
    await sms2.sms_text.set()


    @dp.message_handler(state=sms2.sms_text)
    async def sms_spam(message: Message,  state: FSMContext):
        data = await state.get_data()
        sms = message.text
        with open('sms.txt', 'w') as f:
            f.write(sms)
        await message.answer('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω !',
                            reply_markup=back_to_main_menu)

@dp.callback_query_handler(text="use")
async def use(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("<b>–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º Users</b>", reply_markup=userrs)
    
@dp.callback_query_handler(text="spisok_us")
async def usse(call: CallbackQuery):
    ss = open('ussers.txt', 'r').read()
    if len(ss) <= 1:
        await call.answer("–°–ø–∏—Å–æ–∫ –ü—É—Å—Ç !")
    await call.message.answer(ss, reply_markup=back_to_main_menu)
  

@dp.callback_query_handler(text="adusse", state='*')
async def adusse(call: CallbackQuery):
    await call.message.answer(
        f"<b>–í–≤–µ–¥–∏ Username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫—É</b>"
        f"<b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:</b> <code>@username</code> ")
    await post.tets_text.set()

@dp.message_handler(state=post.tets_text)
async def adusse(message: Message, state: FSMContext):
    data = await state.get_data()
    name_x = message.text
    ss = open('ussers.txt', 'r').readlines()
    ss.append(f'{name_x}\n')
    with open('ussers.txt', 'w') as f:
        f.writelines(ss)
    new_us = open('ussers.txt', 'r').read()
    await message.answer(new_us, reply_markup=back_to_main_menu)




@dp.callback_query_handler(text="rmusse")
async def rmusse(call: CallbackQuery):
    await call.answer("–°–ø–∏—Å–æ–∫ –û—á–∏—â–µ–Ω !")
    open("ussers.txt", "w")
    



@dp.callback_query_handler(text="usse")
async def usse(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–∏–ª —Å usernams —á—Ç–æ–± –∫–∞–∂–¥—ã–π —é–∑–∏–∫ –±—ã–ª —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ </b>",
                                 reply_markup=back_to_main_menu)


    @dp.message_handler(content_types=['document'])
    async def uss(message: Message):
        await message.document.download(destination="ussers.txt")
        await message.answer("–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=back_to_main_menu)


@dp.callback_query_handler(text="del_acc")
async def del_account(call: CallbackQuery, state: FSMContext):
    file_list = os.listdir('sessions')
    z = len(file_list)
    for x in file_list:
        try:
            cli = open(f"sessions/{x}").read()
            client = TelegramClient(StringSession(cli), api_id, api_hash)
            await client.connect()
        except:
            client = TelegramClient(f"sessions/{x}", api_id, api_hash)
            await client.connect()
        result = await client(functions.users.GetFullUserRequest(id="me"))
        nam = result.user.first_name
        lnam = result.user.last_name
        keyboard = InlineKeyboardMarkup()
    #for x in range(z):
        keyboard.add(InlineKeyboardButton(text=f"{nam}", callback_data=file_list[x]))
        keyboard.add(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_main_menu"))
        await call.message.answer('<b>–ö–∞–∫–æ–π –ê–∫–∞—É–Ω—Ç –£–¥–∞–ª–∏—Ç—å ?</b>\n\n', reply_markup=keyboard)
        @dp.callback_query_handler(lambda c: c.data)
        async def poc_callback_but(c:types.CallbackQuery):
            ydal = c.data
            os.remove(f"sessions/{ydal}")
            await call.message.answer(f'<b>‚úÖ –ê–∫–∞—É–Ω—Ç {ydal.split(".")[0]} –£–¥–∞–ª–µ–Ω ‚úÖ</b>', reply_markup=back_to_main_menu)
    """
    keyboard = types.InlineKeyboardMarkup()
    for x in str(file_list):
        keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=cb) for name, cb in
            {f'{file_list[x]}', f'{file_list[x]}'}.items()])
        await call.message.answer('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ê–∫–∞—É–Ω—Ç—ã:', reply_markup=keyboard)

    await call.message.edit_text("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
                                 reply_markup=back_to_main_menu)
    await DelAcc.D1.set()
    await state.update_data(msg_to_edit=call)
"""

@dp.message_handler(state=DelAcc.D1)
async def del_account(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    job = scheduler.get_job(job_id=str(message.from_user.id))
    await message.delete()
    if not job:
        if await get_acc_num(message.from_user.id, message.text):
            await del_acc(message.from_user.id, message.text)
            os.remove(f"sessions/{message.text}.session")
            await state.finish()
            await msg_to_edit.message.edit_text("<b>–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω</b>", reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.message.answer(text="‚ùóÔ∏è–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await msg_to_edit.message.answer(text="‚ùóÔ∏è–í–∞—à–∞ —Å–ø–∞–º-–∞—Ç–∞–∫–∞ —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–∞, "
                                              "—Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è.", show_alert=True)
        await state.finish()




@dp.callback_query_handler(text="leave")
async def leave(call: CallbackQuery):
    user = await select_user(call.from_user.id)
    if user[6] == 0:
        await update_leave(call.from_user.id, 1)
    else:
        await update_leave(call.from_user.id, 0)
    user = await select_user(call.from_user.id)
    stat = await select_statistic()
    result_date = await get_user_date(call.from_user.id)
    await call.message.edit_text(text=f"<b>ü§ñ–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {stat[0]}\n"
                                      f"‚ò¢Ô∏è–°–¥–µ–ª–∞–Ω–æ –∞—Ç–∞–∫: {stat[1]}\n\n"
                                      f"‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stat[2]}\n"
                                      f"üß¨–ü—Ä–æ–∫—Å–∏: {'‚úîÔ∏è–ï—Å—Ç—å' if user[5] else '‚ùóÔ∏è–ù–µ—Ç—É'}\n"
                                      f"üîì–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {result_date}\n"
                                      f"‚ôªÔ∏è–í—ã—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ —Å–ø–∞–º–∞: {'‚úÖ' if user[6] == 1 else '‚õîÔ∏è'}</b>",
                                 reply_markup=await main_menu(call.from_user.id))


@dp.callback_query_handler(text="stop_spam")
async def leave(call: CallbackQuery):
    job = scheduler.get_job(job_id=str(call.from_user.id))
    if job:
        job.remove()
        await call.answer("‚ùóÔ∏è–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        await call.answer("‚ùóÔ∏è–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–∞–º-–∞—Ç–∞–∫–∏")


@dp.callback_query_handler(text="proxy_settings")
async def leave(call: CallbackQuery):
    await call.message.edit_text("<b>üß¨–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –ü—Ä–æ–∫—Å–∏!</b>\n"
                                 "–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=proxy_menu)


@dp.callback_query_handler(text="st")
async def add_new_proxy(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>‚úèÔ∏è–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–º—Å:</b>",
                                 reply_markup=back_to_main_menu)
    await AddProxy.P1.set()
    await state.update_data(msg=call)


@dp.message_handler(state=AddProxy.P1)
async def add_new_proxy(message: Message, state: FSMContext):
    data = await state.get_data()
    
    msg = data.get("msg")
    tim = message.text
    tt = open('time.txt', 'w')
    tt.write(tim)
    tt.close()
    await message.answer(text=f"‚úÖ –¢–∞–π–º–∏–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {tim}", reply_markup=back_to_main_menu)


@dp.callback_query_handler(text="ad_sesion")
async def ad_sesion(call: CallbackQuery):
    await call.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª—ã sesions</b>")
    @dp.message_handler(content_types=['document'])
    async def uss(message: Message):
        
        bbbb =  message.document.file_name #.download(destination="ussers.txt")

        fast = bbbb.split(".")
        try:
            if fast[1] == 'session':
                time.sleep(2)
                await message.document.download(destination=f"sessions/{bbbb}")
                await message.answer(f"<b>–ê–∫–∞—É–Ω—Ç <code>{fast[0]}</code> –¥–æ–±–∞–≤–ª–µ–Ω</b>", reply_markup=back_to_main_menu)
            else:
                await message.answer(f"<b>–§–∞–∏–ª <code>{fast}</code> –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –ª–∏–±–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞</b>", reply_markup=back_to_main_menu)
        except:
            await message.answer("<b>‚ÄºÔ∏è –§–∞–∏–ª –Ω–µ–¥–æ–±—É—Å—Ç–∏–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ‚ÄºÔ∏è</b>", reply_markup=back_to_main_menu)
@dp.callback_query_handler(text="sbor")
async def knp(call: CallbackQuery):
    await call.answer("–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø!!!")

    @dp.message_handler(content_types=["text"])
    async def knp2(message: Message):
        danii = message.text
        print(danii)
        with open('knopka.txt', 'w') as f:
            f.write(danii)
        await message.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=back_to_main_menu)

@dp.callback_query_handler(text="del_proxy")
async def add_new_proxy(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ IPV4 –í —Ñ–æ—Ä–º–∞—Ç–µ: user:pass@ip:port</b>",
                                 reply_markup=back_to_main_menu)
    await DelProxy.P1.set()
    await state.update_data(msg=call)


@dp.message_handler(state=DelProxy.P1)
async def add_new_proxy(message: Message, state: FSMContext):
    data = await state.get_data()
    msg = data.get("msg")
    proxy = message.text
    if await select_proxy(message.from_user.id, proxy):
        await del_proxy(message.from_user.id, proxy)
        await msg.message.edit_text("<b>–ü—Ä–æ–∫—Å–∏ —É–¥–∞–ª–µ–Ω–Ω—ã</b>", reply_markup=back_to_main_menu)
        await state.finish()
    else:
        await msg.message.answer("‚ùóÔ∏è–¢–∞–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    await message.delete()


@dp.callback_query_handler(text="pusk")
async def pusk_start(call: CallbackQuery):
    #await call.message.answer('–°–ø–∞–º –ù–∞—á–∞–ª—Å—è')
    #await call.message.edit_text("üöÄ–í—ã–±–µ—Ä–µ—Ç–µ –∫—É–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–∞—à—É –∞—Ç–∞–∫—É!", reply_markup=start_spam_menu)
    tt = open('time.txt', 'r')
    ti = int(tt.read())
    tt.close()
    with open("status.txt", "w") as f:
        f.write("0")
    api_id = 7265064
    api_hash = "9ec54c3437a4b240456f08dd3276f5c3"
    file_list = os.listdir('sessions')
    xx = len(file_list)
    i = 1
    t = 0
    m = 0
    mx = 40
    msm = 0
    while i <= xx:
        mm = 0
        try:
            file_list = os.listdir('sessions')
            acaunt = file_list[i]
            client = TelegramClient(f"sessions/{acaunt}", api_id, api_hash)
            await client.connect() 
            me = await client.get_me()
        except:
            await client.disconnect()
            os.remove(f"sessions/{acaunt}")
        try:
            ssm = open('sms.txt', 'r').read()
            zz = ssm.split('|')
            sms = random.choice(zz)
        except:
            sms = "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–º—Å"
        ss = open('ussers.txt', 'r').readlines()
        z = len(ss)
        count = int(z)
        for x in range(count):
            try:
                if mm <= 5:
                    stat = open("status.txt", "r").read()
                    if stat == 1:
                        break
                    await client.send_message(ss[x][:-1], sms)
                    msm = msm + 1
                    mm = mm + 1
                    await call.message.edit_text(
                        f"<b>–í –†–∞—Å—Å—ã–ª–∫—É –∑–∞–ø—É—â–µ–Ω–Ω–æ {xx} –ê–∫–∞—É–Ω—Ç–æ–≤</b>\n"
                        f"<b>–ü–æ–¥–∫–ª—é—á–µ–Ω –ê–∫–∞—É–Ω—Ç ‚Ññ<code>{i}</code></b>\n"
                        f"<b>–û—Ç–ø—Ä–∞–≤–ª—è—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:</b> \n\n"
                        f"<code>{sms}</code>\n"
                        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b> <code>{ss[x][:-1]}</code>\n"
                        f"<b>–¢–∞–π–º–∏–Ω–≥ –ø–∞—É–∑—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {ti} —Å–µ–∫—É–Ω–¥</b>\n"
                        f"<b>–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —Å–º—Å:</b>    <code>{msm}</code>\n",
                        reply_markup=STOP
                        )
                    time.sleep(ti)
            except:
                
                i = i + 1
              
        await client.disconnect() 
        i = i + 1

            
            
            
    await call.message.answer("‚úÖ –†–ê–°–°–´–õ–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê")
    
@dp.callback_query_handler(text_startswith="spam:")
async def start_spam(call: CallbackQuery, state: FSMContext):
    option = call.data.split(":")[1]
    if option == "chat":
        text = "üöÄ–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç: (–∫—Ä–∞–π–Ω–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —á–∞—Ç–æ–≤)"
        await SpamChat.S1.set()
    elif option == "user":
        text = "üöÄ–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å–ø–∞–º–∏—Ç—å: "
        await SpamUser.S1.set()
    else:
        text = "üöÄ–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞:"
        await SpamBot.S1.set()
    msg_to_edit = await call.message.edit_text(text, reply_markup=back_to_main_menu)
    await state.update_data(msg_to_edit=msg_to_edit)


@dp.message_handler(state=SpamBot.S1)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    url = message.text
    await SpamBot.next()
    await state.update_data(url=url)
    await message.answer(text="‚è∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: (–æ—Ç 1 –¥–æ 60)",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamBot.S2)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    try:
        interval = int(message.text)
        if 1 <= interval <= 60:
            await SpamBot.next()
            await state.update_data(interval=interval)
            await message.answer(text="üî∞–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –∞—Ç–∞–∫–∞:",
                                        reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    except ValueError:
        await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    await message.delete()


@dp.message_handler(state=SpamBot.S3)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time = data.get("interval"), message.text
    await SpamBot.next()
    await state.update_data(time=time)
    await message.answer(text=f"<b>üì®–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ø–∞–º–∞:</b>\n"
                                     f"‚óΩÔ∏è–£—Å–ª—É–≥–∞: üí¨–í —á–∞—Ç\n"
                                     f"‚óΩÔ∏è–¢–µ–∫—Å—Ç:\n{msg_txt}\n"
                                     f"‚óΩÔ∏è–§–æ—Ç–æ: -\n"
                                     f"‚óΩÔ∏è–ó–∞–¥–µ—Ä–∂–∫–∞: {interval} –°–µ–∫—É–Ω–¥\n"
                                     f"‚óΩÔ∏è–í—Ä–µ–º—è —Å–ø–∞–º–∞: {time} –°–µ–∫—É–Ω–¥",
                                reply_markup=accept_spam_menu)
    await message.delete()


##########################################
##########################################
from telethon import utils
@dp.callback_query_handler(text="proverka")
async def accept_spam(call: CallbackQuery):
    file_list = os.listdir('sessions')
    xx = len(file_list)
    i = 1
    while i <= xx:
        file_list = os.listdir('sessions')
        acaunt = file_list[i]
        client = TelegramClient(f"sessions/{acaunt}", api_id, api_hash)
        await client.connect() 
        try:
            me = await client.get_me()
        except:
            await client.disconnect()
            os.remove(f"sessions/{acaunt}")
            #with open('dialog.txt', 'w') as f:
            #   f.write(str(dialogs))
        i = i + 1



@dp.callback_query_handler(state=SpamBot.S4)
async def accept_spam(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time = data.get("interval"), data.get("time")
    await state.finish()
    scheduler.add_job(
                send_message_to_chat,
                "interval", seconds=interval,
                args=(call.from_user.id, url, "/start"),
                id=f"{call.from_user.id}"
            )
    scheduler.add_job(stop_job, "date", run_date=datetime.now() + timedelta(seconds=int(time)),
                      args=(call.from_user.id,))
    await call.message.edit_text("<b>–°–ø–∞–º-–∞—Ç–∞–∫–∞ –Ω–∞—á–∞—Ç–∞</b>", reply_markup=back_to_main_menu)
    await update_attacks()


@dp.message_handler(state=SpamUser.S1)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    url = message.text
    await SpamUser.next()
    await state.update_data(url=url)
    await message.answer(text="‚úâÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è:",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamUser.S2)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    msg_txt = message.text
    await SpamUser.next()
    await state.update_data(msg_txt=msg_txt)
    await message.answer(text="‚è∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: (–æ—Ç 1 –¥–æ 60)",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamUser.S3)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    try:
        interval = int(message.text)
        if 1 <= interval <= 60:
            await SpamUser.next()
            await state.update_data(interval=interval)
            await message.answer(text="üî∞–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –∞—Ç–∞–∫–∞:",
                                        reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    except ValueError:
        await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    await message.delete()


@dp.message_handler(state=SpamUser.S4)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time = data.get("interval"), message.text
    await SpamUser.next()
    await state.update_data(time=time)
    await message.answer(text=f"<b>üì®–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ø–∞–º–∞:</b>\n"
                                     f"‚óΩÔ∏è–£—Å–ª—É–≥–∞: üí¨–í —á–∞—Ç\n"
                                     f"‚óΩÔ∏è–¢–µ–∫—Å—Ç:\n{msg_txt}\n"
                                     f"‚óΩÔ∏è–§–æ—Ç–æ: -\n"
                                     f"‚óΩÔ∏è–ó–∞–¥–µ—Ä–∂–∫–∞: {interval} –°–µ–∫—É–Ω–¥\n"
                                     f"‚óΩÔ∏è–í—Ä–µ–º—è —Å–ø–∞–º–∞: {time} –°–µ–∫—É–Ω–¥",
                                reply_markup=accept_spam_menu)
    await message.delete()


@dp.callback_query_handler(state=SpamUser.S5)
async def accept_spam(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time, photo = data.get("interval"), data.get("time"), data.get("photo")
    await state.finish()
    scheduler.add_job(
                send_message_to_chat,
                "interval", seconds=interval,
                args=(call.from_user.id, url, msg_txt),
                id=f"{call.from_user.id}"
            )
    scheduler.add_job(stop_job, "date", run_date=datetime.now() + timedelta(seconds=int(time)),
                      args=(call.from_user.id,))
    await call.message.edit_text("<b>–°–ø–∞–º-–∞—Ç–∞–∫–∞ –Ω–∞—á–∞—Ç–∞</b>", reply_markup=back_to_main_menu)
    await update_attacks()


@dp.message_handler(state=SpamChat.S1)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    url = message.text
    await SpamChat.next()
    await state.update_data(url=url)
    await message.answer(text="‚úâÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è:",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamChat.S2)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    msg_txt = message.text
    await SpamChat.next()
    await state.update_data(msg_txt=msg_txt)
    await message.answer(text="‚è∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: (–æ—Ç 1 –¥–æ 60)",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamChat.S3)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    try:
        interval = int(message.text)
        if 1 <= interval <= 60:
            await SpamChat.next()
            await state.update_data(interval=interval)
            await message.answer(text="üî∞–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –∞—Ç–∞–∫–∞:",
                                        reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    except ValueError:
        await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    await message.delete()


@dp.message_handler(state=SpamChat.S4)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    try:
        time = int(message.text)
        await SpamChat.next()
        await state.update_data(time=time)
        await message.answer(text="üñº–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n"
                                         "üìñ–°–æ–∑–¥–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç: @photovip_rezerv_bot\n\n"
                                         "–ù–∞–ø–∏—à–∏—Ç–µ - —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
                                    reply_markup=back_to_main_menu)

    except ValueError:
        await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    await message.delete()


@dp.message_handler(state=SpamChat.S5)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time, photo = data.get("interval"), data.get("time"), message.text
    await SpamChat.next()
    if photo == "-":
        photo = None
    await state.update_data(photo=photo)
    await message.answer(text=f"<b>üì®–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ø–∞–º–∞:</b>\n"
                                     f"‚óΩÔ∏è–£—Å–ª—É–≥–∞: üí¨–í —á–∞—Ç\n"
                                     f"‚óΩÔ∏è–¢–µ–∫—Å—Ç:\n{msg_txt}\n"
                                     f"‚óΩÔ∏è–§–æ—Ç–æ: {photo}\n"
                                     f"‚óΩÔ∏è–ó–∞–¥–µ—Ä–∂–∫–∞: {interval} –°–µ–∫—É–Ω–¥\n"
                                     f"‚óΩÔ∏è–í—Ä–µ–º—è —Å–ø–∞–º–∞: {time} –°–µ–∫—É–Ω–¥",
                                reply_markup=accept_spam_menu)
    await message.delete()


@dp.callback_query_handler(state=SpamChat.S6)
async def accept_spam(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time, photo = data.get("interval"), data.get("time"), data.get("photo")
    await state.finish()
    scheduler.add_job(
                send_message_to_chat,
                "interval", seconds=interval,
                args=(call.from_user.id, url, msg_txt, photo),
                id=f"{call.from_user.id}"
            )
    scheduler.add_job(stop_job, "date", run_date=datetime.now() + timedelta(seconds=time), args=(call.from_user.id,))
    await call.message.answer("<b>–°–ø–∞–º-–∞—Ç–∞–∫–∞ –Ω–∞—á–∞—Ç–∞</b>", reply_markup=back_to_main_menu)
    await update_attacks()

@dp.callback_query_handler(text="adaka")
async def show_all_chats(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("<b>–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: </b>", reply_markup=akiy
)


# ===============ADD/CHANGE ACCOUNT===========
@dp.callback_query_handler(text="add_account")
async def show_all_chats(call: CallbackQuery, state: FSMContext):
    msg_to_edit = await call.message.edit_text("<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞. –í —Ñ–æ—Ä–º–∞—Ç–µ +380xxxxxxxxx</b>",
                                               reply_markup=back_to_main_menu)
    await AddAccount.A1.set()
    await state.update_data(msg_to_edit=msg_to_edit)


@dp.message_handler(state=AddAccount.A1)
async def receive_number(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    number = message.text
    await message.delete()
    if os.path.exists(f"temp/{number}.session"):
        os.remove(f"temp/{number}.session")
        await update_session(number, None)
    client = TelegramClient(f"temp/{number}", api_id, api_hash)
    await client.connect()
    sent = await client.send_code_request(phone=number)
    await client.disconnect()
    await msg_to_edit.edit_text(f"<b>–í—ã —É–∫–∞–∑–∞–ª–∏ <code>{number}</code>\n"
                                f"–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –∫–æ–¥–∞:</b>",
                                reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(number=number, sent=sent, code_hash=sent.phone_code_hash)


@dp.callback_query_handler(text_startswith="code_number:", state=AddAccount.A2)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    num_1 = call.data.split(":")[1]
    await msg_to_edit.edit_text(f"<b>–ö–æ–¥ –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —Ç—É—Ç: <code>{num_1}</code></b>", reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(num_1=num_1)


@dp.callback_query_handler(text_startswith="code_number:", state=AddAccount.A3)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, num_1 = data.get("msg_to_edit"), data.get("num_1")
    num_2 = call.data.split(":")[1]
    code = num_1 + num_2
    await msg_to_edit.edit_text(f"<b>–ö–æ–¥ –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —Ç—É—Ç: <code>{code}</code></b>", reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(num_2=num_2)


@dp.callback_query_handler(text_startswith="code_number:", state=AddAccount.A4)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, num_1, num_2 = data.get("msg_to_edit"), data.get("num_1"), data.get("num_2")
    num_3 = call.data.split(":")[1]
    code = num_1 + num_2 + num_3
    await msg_to_edit.edit_text(f"<b>–ö–æ–¥ –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —Ç—É—Ç: <code>{code}</code></b>", reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(num_3=num_3)


@dp.callback_query_handler(text_startswith="code_number:", state=AddAccount.A5)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, num_1, num_2, num_3 = data.get("msg_to_edit"), data.get("num_1"), data.get("num_2"), data.get("num_3")
    num_4 = call.data.split(":")[1]
    code = num_1 + num_2 + num_3 + num_4
    await msg_to_edit.edit_text(f"<b>–ö–æ–¥ –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —Ç—É—Ç: <code>{code}</code></b>", reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(num_4=num_4)


@dp.callback_query_handler(state=AddAccount.A6)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, num_1, num_2, num_3 = data.get("msg_to_edit"), data.get("num_1"), data.get("num_2"), data.get("num_3")
    number, num_4, sent, code_hash = data.get("number"), data.get("num_4"), data.get("sent"), data.get("code_hash")
    num_5 = call.data.split(":")[1]
    code = num_1 + num_2 + num_3 + num_4 + num_5
    try:
        client = TelegramClient(f"sessions/{number}", api_id, api_hash)
        await client.connect()
        await client.sign_in(phone=number, code=code, phone_code_hash=code_hash)
        string = StringSession.save(client.session)
        with open(f"sessions/{number}.session", "w") as file:
            file.write(string)
        await client.disconnect()
        await update_session(call.from_user.id, call.from_user.id)
        await add_acc(call.from_user.id, number)
        await msg_to_edit.edit_text(f"<b>–ì–æ—Ç–æ–≤–æ, –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω</b>", reply_markup=back_to_main_menu)
        await update_acc_count()
        await state.finish()
        os.remove(f"temp/{number}")
    except Exception as e:
        print(e)
        await msg_to_edit.edit_text("–ù–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥, –∏–ª–∏ —Å—Ç–æ–∏—Ç –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å, —É–±–µ—Ä–∏ –µ–≥–æ –∏ –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.", reply_markup=back_to_main_menu)
        await client.disconnect()
        os.remove(f"temp/{number}")
        await state.finish()
